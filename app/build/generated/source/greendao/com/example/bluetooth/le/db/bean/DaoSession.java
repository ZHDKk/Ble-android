package com.example.bluetooth.le.db.bean;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.example.bluetooth.le.db.bean.Cutting;
import com.example.bluetooth.le.db.bean.Fault;
import com.example.bluetooth.le.db.bean.Health;
import com.example.bluetooth.le.db.bean.Signal;
import com.example.bluetooth.le.db.Charge;

import com.example.bluetooth.le.db.bean.CuttingDao;
import com.example.bluetooth.le.db.bean.FaultDao;
import com.example.bluetooth.le.db.bean.HealthDao;
import com.example.bluetooth.le.db.bean.SignalDao;
import com.example.bluetooth.le.db.ChargeDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig cuttingDaoConfig;
    private final DaoConfig faultDaoConfig;
    private final DaoConfig healthDaoConfig;
    private final DaoConfig signalDaoConfig;
    private final DaoConfig chargeDaoConfig;

    private final CuttingDao cuttingDao;
    private final FaultDao faultDao;
    private final HealthDao healthDao;
    private final SignalDao signalDao;
    private final ChargeDao chargeDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        cuttingDaoConfig = daoConfigMap.get(CuttingDao.class).clone();
        cuttingDaoConfig.initIdentityScope(type);

        faultDaoConfig = daoConfigMap.get(FaultDao.class).clone();
        faultDaoConfig.initIdentityScope(type);

        healthDaoConfig = daoConfigMap.get(HealthDao.class).clone();
        healthDaoConfig.initIdentityScope(type);

        signalDaoConfig = daoConfigMap.get(SignalDao.class).clone();
        signalDaoConfig.initIdentityScope(type);

        chargeDaoConfig = daoConfigMap.get(ChargeDao.class).clone();
        chargeDaoConfig.initIdentityScope(type);

        cuttingDao = new CuttingDao(cuttingDaoConfig, this);
        faultDao = new FaultDao(faultDaoConfig, this);
        healthDao = new HealthDao(healthDaoConfig, this);
        signalDao = new SignalDao(signalDaoConfig, this);
        chargeDao = new ChargeDao(chargeDaoConfig, this);

        registerDao(Cutting.class, cuttingDao);
        registerDao(Fault.class, faultDao);
        registerDao(Health.class, healthDao);
        registerDao(Signal.class, signalDao);
        registerDao(Charge.class, chargeDao);
    }
    
    public void clear() {
        cuttingDaoConfig.clearIdentityScope();
        faultDaoConfig.clearIdentityScope();
        healthDaoConfig.clearIdentityScope();
        signalDaoConfig.clearIdentityScope();
        chargeDaoConfig.clearIdentityScope();
    }

    public CuttingDao getCuttingDao() {
        return cuttingDao;
    }

    public FaultDao getFaultDao() {
        return faultDao;
    }

    public HealthDao getHealthDao() {
        return healthDao;
    }

    public SignalDao getSignalDao() {
        return signalDao;
    }

    public ChargeDao getChargeDao() {
        return chargeDao;
    }

}
